name: Basic CI

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  push:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release

jobs:
  validate:
    name: Validate Code Structure
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install build tools
      run: |
        echo "üîç Performing basic code validation"
        echo "Note: No GPU runtime testing available on GitHub Actions"
        echo ""

        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          gcc \
          g++ \
          pkg-config \
          build-essential

    - name: Check CUDA availability
      run: |
        echo "Checking for CUDA compiler..."
        if command -v nvcc &> /dev/null; then
          echo "‚úÖ CUDA compiler found: $(nvcc --version | head -1)"
        else
          echo "‚ö†Ô∏è CUDA compiler not found - basic validation only"
        fi

    - name: Validate project structure
      run: |
        echo "=== Project Structure Validation ==="

        # Check for required directories
        required_dirs=("src" "include" "tests")
        for dir in "${required_dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "‚úÖ $dir/ directory exists"
          else
            echo "‚ùå $dir/ directory missing"
            exit 1
          fi
        done

        # Check for key files
        key_files=("CMakeLists.txt" "include/gsdr/gsdr.h")
        for file in "${key_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done

    - name: Check code quality
      run: |
        echo "=== Code Quality Analysis ==="

        # Basic syntax check
        echo "Validating C++ syntax..."
        syntax_errors=0
        find src/ include/ tests/ -name "*.cpp" -o -name "*.cu" -o -name "*.cuh" -o -name "*.h" | \
        while read file; do
          if [ -f "$file" ]; then
            echo "  Checking $file..."
            if ! head -50 "$file" > /tmp/syntax_check.cpp 2>/dev/null; then
              echo "  ‚ö†Ô∏è Cannot read file: $file"
              continue
            fi
            if ! gcc -fsyntax-only -x c++ /tmp/syntax_check.cpp 2>/dev/null; then
              echo "  ‚ùå Syntax error in $file"
              syntax_errors=$((syntax_errors + 1))
            fi
          fi
        done

        if [ "$syntax_errors" -eq 0 ]; then
          echo "‚úÖ All files pass syntax validation"
        else
          echo "‚ùå Found $syntax_errors files with syntax issues"
          exit 1
        fi

        # Check for TODO/FIXME comments in production code
        todo_count=$(grep -r "TODO\|FIXME\|XXX" src/ include/ --include="*.cpp" --include="*.cu" --include="*.h" | grep -v "test_" | wc -l)
        if [ "$todo_count" -gt 0 ]; then
          echo "‚ö†Ô∏è Found $todo_count TODO/FIXME comments in production code"
        else
          echo "‚úÖ No TODO/FIXME comments found in production code"
        fi

        # Count files
        src_files=$(find src/ -name "*.cpp" -o -name "*.cu" | wc -l)
        test_files=$(find tests/ -name "test_*.cpp" | wc -l)
        echo "üìä Found $src_files source files and $test_files test files"

    - name: Generate validation report
      if: always()
      run: |
        echo "## üîç GSDR Validation Report" > validation_report.md
        echo "" >> validation_report.md
        echo "| Check | Status | Details |" >> validation_report.md
        echo "|-------|--------|---------|" >> validation_report.md

        # Syntax validation
        syntax_errors=$(find src/ include/ tests/ -name "*.cpp" -o -name "*.cu" -o -name "*.cuh" -o -name "*.h" | \
                       xargs -I {} sh -c 'head -50 "{}" > /tmp/syntax_check.cpp 2>/dev/null && gcc -fsyntax-only -x c++ /tmp/syntax_check.cpp 2>/dev/null || echo "error"' | \
                       grep -c "error" || echo "0")

        if [ "$syntax_errors" -eq 0 ]; then
          echo "| Syntax Check | ‚úÖ PASS | All C++ files compile without syntax errors |" >> validation_report.md
        else
          echo "| Syntax Check | ‚ùå FAIL | $syntax_errors files have syntax issues |" >> validation_report.md
        fi

        # TODO check
        todo_count=$(grep -r "TODO\|FIXME\|XXX" src/ include/ --include="*.cpp" --include="*.cu" --include="*.h" | grep -v "test_" | wc -l)
        if [ "$todo_count" -eq 0 ]; then
          echo "| Code Quality | ‚úÖ PASS | No TODO/FIXME comments in production code |" >> validation_report.md
        else
          echo "| Code Quality | ‚ö†Ô∏è WARN | $todo_count TODO/FIXME comments found |" >> validation_report.md
        fi

        # Project structure
        if [ -d "src" ] && [ -d "include" ] && [ -d "tests" ] && [ -f "CMakeLists.txt" ]; then
          echo "| Project Structure | ‚úÖ PASS | All required directories and files present |" >> validation_report.md
        else
          echo "| Project Structure | ‚ùå FAIL | Missing required directories or files |" >> validation_report.md
        fi

        # Test files
        test_files=$(find tests/ -name "test_*.cpp" | wc -l)
        if [ "$test_files" -gt 0 ]; then
          echo "| Test Coverage | ‚úÖ PASS | Found $test_files test files |" >> validation_report.md
        else
          echo "| Test Coverage | ‚ö†Ô∏è WARN | No test files found |" >> validation_report.md
        fi

        echo "" >> validation_report.md
        echo "### üìã Summary" >> validation_report.md
        echo "- **Validation Date**: $(date)" >> validation_report.md
        echo "- **Files Checked**: $(find src/ include/ tests/ -name "*.cpp" -o -name "*.cu" -o -name "*.cuh" -o -name "*.h" | wc -l)" >> validation_report.md
        echo "- **Test Files**: $test_files" >> validation_report.md
        echo "- **CUDA Runtime**: Not available (GitHub Actions limitation)" >> validation_report.md
        echo "" >> validation_report.md
        echo "### ‚ö†Ô∏è Important Notes" >> validation_report.md
        echo "- **GPU Testing**: Not available on GitHub Actions (no CUDA hardware)" >> validation_report.md
        echo "- **Code Quality**: Static analysis and syntax validation completed" >> validation_report.md
        echo "- **Actual GPU Testing**: Requires CUDA-capable hardware locally" >> validation_report.md
        echo "" >> validation_report.md
        echo "---" >> validation_report.md
        echo "*Generated by GitHub Actions CI*" >> validation_report.md

    - name: Comment PR with validation results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'validation_report.md';

          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
          } else {
            const fallbackComment = `## üîç GSDR CI Results

‚úÖ **Validation Status**: ${{ job.status == 'success' ? 'PASSED' : 'FAILED' }}

### What Was Checked:
- ‚úÖ Syntax validation of all C++/CUDA files
- ‚úÖ Code quality (TODO/FIXME comments)
- ‚úÖ Project structure and required files

### Important Notes:
- **GPU Testing**: Not available on GitHub Actions
- **Code Quality**: Static analysis completed
- **Runtime Testing**: Requires CUDA-capable hardware

### For GPU Testing:
\`\`\`bash
mkdir build && cd build
cmake .. -DUSE_TESTS=ON
make
ctest --output-on-failure
\`\`\`

*Generated by GitHub Actions CI*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: fallbackComment
            });
          }