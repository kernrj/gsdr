name: CI Comprehensive

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      cuda_version:
        description: 'CUDA version to test against'
        required: false
        default: '11.8'
        type: string

env:
  BUILD_TYPE: Release

jobs:
  # Fast check for basic syntax and compilation
  precheck:
    name: Pre-check (Syntax & Headers)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check code formatting
      run: |
        # Basic syntax check - ensure files are valid C++/CUDA
        echo "Checking C++ files for basic syntax..."
        find src/ include/ tests/ -name "*.cpp" -o -name "*.cu" -o -name "*.cuh" -o -name "*.h" | \
        while read file; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            # Try to parse with basic C++ compiler
            head -50 "$file" > /tmp/test_snippet.cpp
            if ! gcc -fsyntax-only -x c++ /tmp/test_snippet.cpp 2>/dev/null; then
              echo "⚠️ Potential syntax issue in $file"
            fi
          fi
        done

    - name: Check for common issues
      run: |
        echo "Checking for common issues..."

        # Check for TODO/FIXME comments in production code
        if grep -r "TODO\|FIXME\|XXX" src/ include/ --include="*.cpp" --include="*.cu" --include="*.h" | grep -v "test_"; then
          echo "⚠️ Found TODO/FIXME comments in production code:"
          grep -r "TODO\|FIXME\|XXX" src/ include/ --include="*.cpp" --include="*.cu" --include="*.h" | grep -v "test_"
        fi

        # Check for long lines (>120 characters)
        if find src/ include/ tests/ -name "*.cpp" -o -name "*.cu" -o -name "*.cuh" -o -name "*.h" | \
           xargs awk 'length($0) > 120 { print FILENAME ":" NR ":" $0 }' | head -10; then
          echo "⚠️ Found lines longer than 120 characters (showing first 10):"
          find src/ include/ tests/ -name "*.cpp" -o -name "*.cu" -o -name "*.cuh" -o -name "*.h" | \
            xargs awk 'length($0) > 120 { print FILENAME ":" NR ":" $0 }' | head -10
        fi

  # Main test job with CUDA
  test-cuda:
    name: Test (CUDA ${{ matrix.cuda-version }})
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        cuda-version: ['11.8', '12.0']
        include:
          - cuda-version: '11.8'
            cuda-arch: '75'
          - cuda-version: '12.0'
            cuda-arch: '80'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install build tools
      run: |
        echo "🔍 Performing comprehensive code quality and structure validation"
        echo "Note: No GPU runtime testing available on GitHub Actions"
        echo ""

        # Install only basic build tools for code analysis
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          gcc \
          g++ \
          pkg-config \
          build-essential

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          ninja-build \
          libgtest-dev \
          pkg-config \
          build-essential \
          wget \
          curl

    - name: Install GTest (if not available)
      run: |
        # Check if GTest is available
        if ! pkg-config --exists gtest; then
          echo "GTest not found via pkg-config, trying to build from source..."
          cd /tmp
          wget https://github.com/google/googletest/archive/release-1.11.0.tar.gz
          tar -xzf release-1.11.0.tar.gz
          cd googletest-release-1.11.0
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          sudo make install
        fi

    - name: Validate project structure
      run: |
        echo "=== Project Structure Validation ==="

        # Check for required directories and files
        required_dirs=("src" "include" "tests")
        for dir in "${required_dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "✅ $dir/ directory exists"
          else
            echo "❌ $dir/ directory missing"
            exit 1
          fi
        done

        # Check for key files
        key_files=("CMakeLists.txt" "include/gsdr/gsdr.h" "include/gsdr/qpsk.h" "include/gsdr/qpsk256.h")
        for file in "${key_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "⚠️ $file not found (may be expected)"
          fi
        done

        # Count files
        src_files=$(find src/ -name "*.cpp" -o -name "*.cu" | wc -l)
        test_files=$(find tests/ -name "test_*.cpp" | wc -l)
        echo "📊 Found $src_files source files and $test_files test files"

    - name: Check code quality
      run: |
        echo "=== Code Quality Analysis ==="

        # Check for syntax issues
        echo "Validating C++ syntax..."
        syntax_errors=0
        find src/ include/ tests/ -name "*.cpp" -o -name "*.cu" -o -name "*.cuh" -o -name "*.h" | \
        while read file; do
          if [ -f "$file" ]; then
            echo "  Checking $file..."
            if ! head -50 "$file" > /tmp/syntax_check.cpp 2>/dev/null; then
              echo "  ⚠️ Cannot read file: $file"
              continue
            fi
            if ! gcc -fsyntax-only -x c++ /tmp/syntax_check.cpp 2>/dev/null; then
              echo "  ❌ Syntax error in $file"
              syntax_errors=$((syntax_errors + 1))
            fi
          fi
        done

        if [ "$syntax_errors" -eq 0 ]; then
          echo "✅ All files pass syntax validation"
        else
          echo "❌ Found $syntax_errors files with syntax issues"
          exit 1
        fi

        # Check for TODO/FIXME comments in production code
        todo_count=$(grep -r "TODO\|FIXME\|XXX" src/ include/ --include="*.cpp" --include="*.cu" --include="*.h" | grep -v "test_" | wc -l)
        if [ "$todo_count" -gt 0 ]; then
          echo "⚠️ Found $todo_count TODO/FIXME comments in production code"
        else
          echo "✅ No TODO/FIXME comments found in production code"
        fi

    - name: Generate validation report
      if: always()
      run: |
        echo "## 🔍 GSDR Comprehensive Validation Report" > validation_report.md
        echo "" >> validation_report.md
        echo "| Validation | Status | Details |" >> validation_report.md
        echo "|------------|--------|---------|" >> validation_report.md

        # Syntax validation
        syntax_errors=$(find src/ include/ tests/ -name "*.cpp" -o -name "*.cu" -o -name "*.cuh" -o -name "*.h" | \
                       xargs -I {} sh -c 'head -50 "{}" > /tmp/syntax_check.cpp 2>/dev/null && gcc -fsyntax-only -x c++ /tmp/syntax_check.cpp 2>/dev/null || echo "error"' | \
                       grep -c "error" || echo "0")

        if [ "$syntax_errors" -eq 0 ]; then
          echo "| Syntax Check | ✅ PASS | All C++ files compile without syntax errors |" >> validation_report.md
        else
          echo "| Syntax Check | ❌ FAIL | $syntax_errors files have syntax issues |" >> validation_report.md
        fi

        # TODO check
        todo_count=$(grep -r "TODO\|FIXME\|XXX" src/ include/ --include="*.cpp" --include="*.cu" --include="*.h" | grep -v "test_" | wc -l)
        if [ "$todo_count" -eq 0 ]; then
          echo "| Code Quality | ✅ PASS | No TODO/FIXME comments in production code |" >> validation_report.md
        else
          echo "| Code Quality | ⚠️ WARN | $todo_count TODO/FIXME comments found |" >> validation_report.md
        fi

        # Project structure
        if [ -d "src" ] && [ -d "include" ] && [ -d "tests" ] && [ -f "CMakeLists.txt" ]; then
          echo "| Project Structure | ✅ PASS | All required directories and files present |" >> validation_report.md
        else
          echo "| Project Structure | ❌ FAIL | Missing required directories or files |" >> validation_report.md
        fi

        # Test files
        test_files=$(find tests/ -name "test_*.cpp" | wc -l)
        if [ "$test_files" -gt 0 ]; then
          echo "| Test Coverage | ✅ PASS | Found $test_files test files |" >> validation_report.md
        else
          echo "| Test Coverage | ⚠️ WARN | No test files found |" >> validation_report.md
        fi

        echo "" >> validation_report.md
        echo "### 📋 Validation Summary" >> validation_report.md
        echo "- **Validation Date**: $(date)" >> validation_report.md
        echo "- **Files Checked**: $(find src/ include/ tests/ -name "*.cpp" -o -name "*.cu" -o -name "*.cuh" -o -name "*.h" | wc -l)" >> validation_report.md
        echo "- **Test Files**: $test_files" >> validation_report.md
        echo "- **CUDA Runtime**: Not available (GitHub Actions limitation)" >> validation_report.md
        echo "" >> validation_report.md
        echo "### ⚠️ Important Notes" >> validation_report.md
        echo "- **GPU Testing**: Not available on GitHub Actions (no CUDA hardware)" >> validation_report.md
        echo "- **Code Quality**: Static analysis and syntax validation completed" >> validation_report.md
        echo "- **Actual GPU Testing**: Requires CUDA-capable hardware locally" >> validation_report.md
        echo "" >> validation_report.md
        echo "---" >> validation_report.md
        echo "*Generated by GitHub Actions CI*" >> validation_report.md

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-cuda-${{ matrix.cuda-version }}
        path: |
          build/test_report.txt
          build/Testing/
        retention-days: 30

    - name: Test summary
      if: always()
      run: |
        if [ -f build/test_report.txt ]; then
          echo "=== Test Summary ==="
          if grep -q "Failed" build/test_report.txt; then
            echo "❌ Some tests failed"
            echo "Failed tests:"
            grep -n "Failed\|ERROR" build/test_report.txt | head -10
            exit 1
          elif grep -q "Passed" build/test_report.txt; then
            echo "✅ All tests passed!"
          else
            echo "⚠️ No clear test results found"
            exit 1
          fi
        fi

  # Documentation check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for README files
      run: |
        echo "Checking for documentation..."
        if [ ! -f README.md ] && [ ! -f README.rst ] && [ ! -f README.txt ]; then
          echo "⚠️ No main README file found"
        else
          echo "✅ Main README found"
        fi

        # Check for component documentation
        if [ -f README_QPSK.md ]; then
          echo "✅ QPSK documentation found"
        fi

        if [ -f README_QPSK256.md ]; then
          echo "✅ QPSK256 documentation found"
        fi

    - name: Basic documentation validation
      run: |
        echo "Validating documentation format..."
        # Check if README files have reasonable content
        for readme in README*.md; do
          if [ -f "$readme" ]; then
            lines=$(wc -l < "$readme")
            if [ "$lines" -lt 10 ]; then
              echo "⚠️ $readme seems very short ($lines lines)"
            else
              echo "✅ $readme has $lines lines"
            fi
          fi
        done

  # Final status check
  status:
    name: Final Status
    runs-on: ubuntu-latest
    needs: [precheck, test-cuda, docs-check]
    if: always()
    steps:
    - name: Report overall status
      run: |
        echo "=== CI Pipeline Status ==="

        # Check precheck status
        if [ "${{ needs.precheck.result }}" = "success" ]; then
          echo "✅ Pre-check passed"
        else
          echo "❌ Pre-check failed"
        fi

        # Check test status
        if [ "${{ needs.test-cuda.result }}" = "success" ]; then
          echo "✅ All tests passed"
        else
          echo "❌ Tests failed"
        fi

        # Check docs status
        if [ "${{ needs.docs-check.result }}" = "success" ]; then
          echo "✅ Documentation check passed"
        else
          echo "❌ Documentation check failed"
        fi

        echo ""
        echo "=== Summary ==="
        if [ "${{ needs.precheck.result }}" = "success" ] && \
           [ "${{ needs.test-cuda.result }}" = "success" ] && \
           [ "${{ needs.docs-check.result }}" = "success" ]; then
          echo "🎉 All checks passed! Ready for merge."
        else
          echo "⚠️ Some checks failed. Please review."
          exit 1
        fi