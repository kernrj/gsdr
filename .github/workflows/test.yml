name: Tests (Compilation & Validation)

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  push:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release

jobs:
  compile-and-validate:
    name: Compile & Validate (No GPU Runtime)
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        echo "‚ö†Ô∏è IMPORTANT NOTICE:"
        echo "GitHub Actions runners don't have CUDA-capable GPUs"
        echo "This workflow will only compile and validate code structure"
        echo "For actual GPU testing, run tests on a system with CUDA GPUs"
        echo ""

        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          ninja-build \
          gcc \
          g++ \
          build-essential \
          pkg-config

    - name: Check CUDA availability
      run: |
        echo "Checking CUDA availability..."
        if command -v nvcc &> /dev/null; then
          echo "‚úÖ CUDA compiler found: $(nvcc --version | head -1)"
        else
          echo "‚ö†Ô∏è CUDA compiler not found - will attempt CPU-only build"
        fi

    - name: Configure build
      run: |
        mkdir -p build
        cd build

        echo "Configuring CMake build..."
        echo "Note: Tests will be compiled but cannot run without GPU"

        # Try CUDA build first, fallback to CPU-only if CUDA not available
        if command -v nvcc &> /dev/null; then
          echo "Attempting CUDA build with architecture 75..."
          if cmake .. \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DCMAKE_CUDA_ARCHITECTURES=75 \
            -DUSE_TESTS=ON \
            -G Ninja \
            -DCMAKE_CUDA_COMPILER=$(which nvcc); then
            echo "‚úÖ CUDA build configuration successful"
          else
            echo "‚ö†Ô∏è CUDA build failed, trying CPU-only build..."
            cd ..
            rm -rf build
            mkdir build
            cd build
            cmake .. \
              -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
              -DUSE_TESTS=OFF \
              -G Ninja
          fi
        else
          echo "No CUDA compiler found, using CPU-only build..."
          cmake .. \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DUSE_TESTS=OFF \
            -G Ninja
        fi

    - name: Build project
      run: |
        cd build
        echo "Building project..."
        ninja -j$(nproc)

    - name: List build artifacts
      run: |
        cd build
        echo "Build completed. Artifacts:"
        find . -name "*.a" -o -name "*.so" -o -name "*test*" | head -10
        echo ""
        echo "Build configuration:"
        ls -la CMakeCache.txt 2>/dev/null || echo "No CMake cache found"

    - name: Validate build
      run: |
        cd build

        echo "=== Build Validation ==="

        # Check if library was built
        if [ -f "libgsdr.a" ] || [ -f "libgsdr.so" ]; then
          echo "‚úÖ Library built successfully"
        else
          echo "‚ö†Ô∏è Library not found - checking for alternative names..."
          find . -name "*.a" -o -name "*.so" | grep -E "(gsdr|lib)" || echo "‚ùå No library files found"
        fi

        # Check if tests were built (if CUDA was available)
        if [ -f "CTestTestfile.cmake" ]; then
          echo "‚úÖ Tests compiled successfully"
          echo "‚ö†Ô∏è Note: Tests cannot run without GPU runtime"
        else
          echo "‚ÑπÔ∏è Tests not compiled (expected without CUDA)"
        fi

        echo ""
        echo "=== Build Summary ==="
        echo "Build Type: ${BUILD_TYPE}"
        echo "CUDA Available: $(command -v nvcc &> /dev/null && echo 'Yes' || echo 'No')"
        echo "Tests Compiled: $([ -f CTestTestfile.cmake ] && echo 'Yes' || echo 'No')"
        echo "GPU Runtime: NOT AVAILABLE (GitHub Actions limitation)"

    - name: Generate test summary
      if: always()
      run: |
        cd build

        echo "## üöÄ GSDR Build & Validation Results" > test_summary.md
        echo "" >> test_summary.md
        echo "| Component | Status | Notes |" >> test_summary.md
        echo "|-----------|--------|-------|" >> test_summary.md

        # Library status
        if [ -f "libgsdr.a" ] || [ -f "libgsdr.so" ] || find . -name "*.a" -o -name "*.so" | grep -q -E "(gsdr|lib)"; then
          echo "| Library Build | ‚úÖ SUCCESS | Core library compiled |" >> test_summary.md
        else
          echo "| Library Build | ‚ùå FAILED | No library artifacts found |" >> test_summary.md
        fi

        # Test status
        if [ -f "CTestTestfile.cmake" ]; then
          echo "| Test Compilation | ‚úÖ SUCCESS | Tests compiled (cannot run without GPU) |" >> test_summary.md
          echo "| Test Execution | ‚ö†Ô∏è SKIPPED | No GPU runtime available |" >> test_summary.md
        else
          echo "| Test Compilation | ‚ö†Ô∏è SKIPPED | CUDA not available for test compilation |" >> test_summary.md
        fi

        echo "" >> test_summary.md
        echo "### üîß Build Configuration" >> test_summary.md
        echo "- **Build Type**: ${BUILD_TYPE}" >> test_summary.md
        echo "- **CUDA Compiler**: $(command -v nvcc &> /dev/null && echo 'Available' || echo 'Not Available')" >> test_summary.md
        echo "- **Architecture**: 75 (if CUDA available)" >> test_summary.md
        echo "- **Tests**: $([ -f CTestTestfile.cmake ] && echo 'Compiled' || echo 'Disabled')" >> test_summary.md
        echo "" >> test_summary.md
        echo "### ‚ö†Ô∏è Important Notes" >> test_summary.md
        echo "- **GPU Runtime**: GitHub Actions runners don't have CUDA-capable GPUs" >> test_summary.md
        echo "- **Test Execution**: Tests are compiled but cannot run without GPU hardware" >> test_summary.md
        echo "- **Actual Testing**: Run tests on a system with CUDA GPUs for full validation" >> test_summary.md
        echo "" >> test_summary.md
        echo "Build completed at $(date)" >> test_summary.md
        echo "" >> test_summary.md
        echo "---" >> test_summary.md
        echo "*Generated by GitHub Actions CI*" >> test_summary.md

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'build/test_summary.md';

          if (fs.existsSync(path)) {
            const summary = fs.readFileSync(path, 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          } else {
            // Fallback if summary not found
            const fallbackComment = `## üöÄ GSDR CI Results

‚úÖ **Build Status**: ${{ job.status == 'success' ? 'SUCCESS' : 'FAILED' }}

‚ö†Ô∏è **Note**: GitHub Actions cannot run GPU tests due to lack of CUDA hardware.

### For Actual Testing:
Run tests on a system with CUDA-capable GPUs:
\`\`\`bash
mkdir build && cd build
cmake .. -DUSE_TESTS=ON
make
ctest --output-on-failure
\`\`\`

*Generated by GitHub Actions CI*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: fallbackComment
            });
          }