name: Tests

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  push:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup CUDA
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: '11.8.0'
        method: 'network'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          ninja-build \
          libgtest-dev \
          build-essential

    - name: Configure build
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
          -DCMAKE_CUDA_ARCHITECTURES=75 \
          -DUSE_TESTS=ON \
          -G Ninja

    - name: Build project
      run: |
        cd build
        ninja

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --build-config ${BUILD_TYPE}

    - name: Generate test summary
      if: always()
      run: |
        cd build
        echo "## Test Results" > test_summary.md
        echo "" >> test_summary.md
        echo "| Component | Status |" >> test_summary.md
        echo "|-----------|--------|" >> test_summary.md

        # Check if tests passed
        if ctest --output-on-failure --build-config ${BUILD_TYPE} --dry-run | grep -q "Test"; then
          echo "| All Tests | ✅ PASSED |" >> test_summary.md
        else
          echo "| All Tests | ❌ FAILED |" >> test_summary.md
        fi

        echo "" >> test_summary.md
        echo "Build completed at $(date)" >> test_summary.md

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'build/test_summary.md';

          if (fs.existsSync(path)) {
            const summary = fs.readFileSync(path, 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }